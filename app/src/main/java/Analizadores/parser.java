
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import Analizadores.*;
import Reportes.*;
import Objetos.*;
import Herramientas.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\026\002" +
    "\000\002\027\002\000\002\003\013\000\002\030\002\000" +
    "\002\031\002\000\002\003\013\000\002\022\003\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\004\006" +
    "\000\002\005\010\000\002\006\010\000\002\007\010\000" +
    "\002\010\006\000\002\010\006\000\002\011\010\000\002" +
    "\012\010\000\002\013\005\000\002\014\006\000\002\020" +
    "\003\000\002\020\005\000\002\017\003\000\002\017\005" +
    "\000\002\016\005\000\002\016\003\000\002\021\007\000" +
    "\002\015\010\000\002\025\003\000\002\025\003\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\003\000\002\024\005\000\002\024\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\024\004\021\010\026\011\025\012\007\013" +
    "\013\015\012\020\020\021\022\022\010\001\002\000\004" +
    "\002\uffff\001\002\000\006\002\ufff0\007\ufff0\001\002\000" +
    "\006\002\ufff4\007\ufff4\001\002\000\004\032\160\001\002" +
    "\000\004\032\153\001\002\000\006\002\ufff2\007\ufff2\001" +
    "\002\000\004\032\146\001\002\000\004\032\141\001\002" +
    "\000\006\002\ufff5\007\ufff5\001\002\000\004\002\140\001" +
    "\002\000\006\002\ufff6\007\ufff6\001\002\000\004\002\000" +
    "\001\002\000\004\032\136\001\002\000\006\005\074\006" +
    "\075\001\002\000\004\032\071\001\002\000\004\002\ufffd" +
    "\001\002\000\006\002\ufff3\007\ufff3\001\002\000\004\032" +
    "\041\001\002\000\004\032\031\001\002\000\004\002\ufffe" +
    "\001\002\000\006\002\ufff1\007\ufff1\001\002\000\004\024" +
    "\032\001\002\000\004\023\034\001\002\000\006\025\036" +
    "\041\035\001\002\000\006\025\uffe5\041\uffe5\001\002\000" +
    "\004\023\040\001\002\000\004\033\037\001\002\000\006" +
    "\002\uffee\007\uffee\001\002\000\006\025\uffe4\041\uffe4\001" +
    "\002\000\004\024\042\001\002\000\010\003\043\030\044" +
    "\040\047\001\002\000\030\003\043\025\uffdc\027\uffdc\030" +
    "\044\031\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\047" +
    "\041\uffdc\001\002\000\010\003\057\030\044\040\047\001" +
    "\002\000\004\025\065\001\002\000\022\025\uffdd\027\uffdd" +
    "\031\uffdd\034\054\035\053\036\056\037\055\041\uffdd\001" +
    "\002\000\022\025\uffd7\027\uffd7\031\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\041\uffd7\001\002\000\006\025\uffe3\041" +
    "\051\001\002\000\010\003\043\030\044\040\047\001\002" +
    "\000\004\025\uffe2\001\002\000\010\003\057\030\044\040" +
    "\047\001\002\000\010\003\057\030\044\040\047\001\002" +
    "\000\010\003\057\030\044\040\047\001\002\000\010\003" +
    "\057\030\044\040\047\001\002\000\010\003\043\030\044" +
    "\040\047\001\002\000\022\025\uffd9\027\uffd9\031\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9\001\002\000\022" +
    "\025\uffd5\027\uffd5\031\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\041\uffd5\001\002\000\022\025\uffd8\027\uffd8\031\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8\001\002\000" +
    "\022\025\uffdb\027\uffdb\031\uffdb\034\uffdb\035\uffdb\036\056" +
    "\037\055\041\uffdb\001\002\000\022\025\uffda\027\uffda\031" +
    "\uffda\034\uffda\035\uffda\036\056\037\055\041\uffda\001\002" +
    "\000\004\033\066\001\002\000\006\002\uffed\007\uffed\001" +
    "\002\000\014\031\070\034\054\035\053\036\056\037\055" +
    "\001\002\000\022\025\uffd6\027\uffd6\031\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\041\uffd6\001\002\000\004\023\072" +
    "\001\002\000\004\033\073\001\002\000\006\002\uffe6\007" +
    "\uffe6\001\002\000\004\026\127\001\002\000\004\026\076" +
    "\001\002\000\014\012\007\013\013\015\012\020\020\021" +
    "\022\001\002\000\004\007\100\001\002\000\004\032\124" +
    "\001\002\000\004\014\ufff9\001\002\000\004\014\103\001" +
    "\002\000\004\032\107\001\002\000\004\027\ufff8\001\002" +
    "\000\004\027\106\001\002\000\004\002\ufff7\001\002\000" +
    "\004\026\110\001\002\000\004\026\113\001\002\000\006" +
    "\027\uffe0\041\uffe0\001\002\000\006\027\121\041\120\001" +
    "\002\000\010\003\043\030\044\040\047\001\002\000\004" +
    "\041\115\001\002\000\010\003\043\030\044\040\047\001" +
    "\002\000\004\027\117\001\002\000\006\027\uffdf\041\uffdf" +
    "\001\002\000\004\026\113\001\002\000\004\032\122\001" +
    "\002\000\004\027\uffec\001\002\000\006\027\uffe1\041\uffe1" +
    "\001\002\000\004\023\125\001\002\000\004\033\126\001" +
    "\002\000\004\014\uffef\001\002\000\006\010\026\011\025" +
    "\001\002\000\004\007\100\001\002\000\004\014\ufffc\001" +
    "\002\000\004\014\103\001\002\000\004\027\ufffb\001\002" +
    "\000\004\027\135\001\002\000\004\002\ufffa\001\002\000" +
    "\004\033\137\001\002\000\006\002\uffe7\007\uffe7\001\002" +
    "\000\004\002\001\001\002\000\004\024\142\001\002\000" +
    "\010\003\043\030\044\040\047\001\002\000\004\025\144" +
    "\001\002\000\004\033\145\001\002\000\006\002\uffe8\007" +
    "\uffe8\001\002\000\006\016\150\017\147\001\002\000\004" +
    "\033\152\001\002\000\004\033\151\001\002\000\006\002" +
    "\uffeb\007\uffeb\001\002\000\006\002\uffea\007\uffea\001\002" +
    "\000\004\030\154\001\002\000\004\023\155\001\002\000" +
    "\004\031\156\001\002\000\004\033\157\001\002\000\004" +
    "\002\uffde\001\002\000\004\024\161\001\002\000\004\023" +
    "\034\001\002\000\006\025\163\041\035\001\002\000\004" +
    "\033\164\001\002\000\006\002\uffe9\007\uffe9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\162\000\032\002\014\003\016\005\015\006\013\010" +
    "\005\011\023\012\010\013\027\014\004\015\022\022\003" +
    "\023\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\044" +
    "\024\045\025\047\001\001\000\006\024\045\025\060\001" +
    "\001\000\004\024\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\045\025\051\001\001\000\002\001\001\000\004\024\063" +
    "\001\001\000\004\024\062\001\001\000\004\024\061\001" +
    "\001\000\004\024\057\001\001\000\006\024\045\025\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\010\005\011\023\012" +
    "\010\013\027\014\004\023\076\001\001\000\004\004\100" +
    "\001\001\000\002\001\001\000\004\030\101\001\001\000" +
    "\004\007\103\001\001\000\002\001\001\000\004\031\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\111\021\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\045\025\113\001\001\000" +
    "\002\001\001\000\006\024\045\025\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\015\006\013\022\127\001\001\000\004\004\130\001\001" +
    "\000\004\026\131\001\001\000\004\007\132\001\001\000" +
    "\004\027\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\142\024\045\025\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




            private ArrayList<ErrorToken> errorsList = new ArrayList<>();
            private ArrayList<OperadorReport> operadoresList = new ArrayList<>();
            private Graficador grafica = new Graficador();
            int action = 0;
            private boolean errores=false;

            /* CONSTRUCTOR */
            public Parser(Lexer lex) {
                super(lex);
            }

            public Graficador getGrafica() {
                return this.grafica;
            }

            @Override
                public void syntax_error(Symbol st) {
                    Token error = (Token) st.value;
                    report_error("Error Sintactico con el Token:"+ error.getLexeme()+" este no pertenece a la estructura  >linea: "+error.getLine()+" >columna: "+error.getColumn() + "\n",null);
                    ErrorToken errorF = new ErrorToken(error.getLexeme(),error.getLine(),error.getColumn(),"","Sintactico");
                    errorF.siguiente(expected_token_ids());
                    errorsList.add(errorF);
                }

                public ArrayList<ErrorToken> getErrorsList(){
                    return errorsList;
                }

                public ArrayList<OperadorReport> getOperadoresList(){
                    return operadoresList;
                }







/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= def 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= grafica_barras 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= grafica_pie 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= ejecutar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int titulosleft = ((Symbol)CUP$parser$stack.peek()).left;
		int titulosright = ((Symbol)CUP$parser$stack.peek()).right;
		Object titulos = (Object)((Symbol) CUP$parser$stack.peek()).value;
 grafica.registTitulo(st.left,st.right,titulos.toString(), 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int titulosleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int titulosright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object titulos = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tmpleft = ((Symbol)CUP$parser$stack.peek()).left;
		int tmpright = ((Symbol)CUP$parser$stack.peek()).right;
		Object tmp = (Object)((Symbol) CUP$parser$stack.peek()).value;

             grafica.registUnir(st.left, st.right, (ArrayList<short[]>)tmp, 0);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // def ::= DEF BARRAS LLAVE_A grafica_barras titulo NT$0 unir NT$1 LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int titulosleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int titulosright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object titulos = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tmpleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tmpright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tmp = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                grafica.guardarBarras();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              Object RESULT =null;
		int titulosleft = ((Symbol)CUP$parser$stack.peek()).left;
		int titulosright = ((Symbol)CUP$parser$stack.peek()).right;
		Object titulos = (Object)((Symbol) CUP$parser$stack.peek()).value;
 grafica.registTitulo(st.left,st.right,titulos.toString(), 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =(Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int titulosleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int titulosright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object titulos = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tmpleft = ((Symbol)CUP$parser$stack.peek()).left;
		int tmpright = ((Symbol)CUP$parser$stack.peek()).right;
		Object tmp = (Object)((Symbol) CUP$parser$stack.peek()).value;
 grafica.registUnir(st.left, st.right, (ArrayList<short[]>)tmp, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // def ::= DEF PIE LLAVE_A grafica_pie titulo NT$2 unir NT$3 LLAVE_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int titulosleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int titulosright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object titulos = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tmpleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tmpright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tmp = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                grafica.guardarPie();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // grafica_barras ::= ejex 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica_barras",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // grafica_barras ::= ejey 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica_barras",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // grafica_pie ::= tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // grafica_pie ::= etiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // grafica_pie ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // grafica_pie ::= total 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // grafica_pie ::= extra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica_pie",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // titulo ::= TITULO DOSPUNTOS COMILLAS PUNTOCOMA 
            {
              Object RESULT =null;
		int titulosleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int titulosright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token titulos = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("TITULO\n");
                RESULT= titulos.toSting();

             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("titulo",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ejex ::= EJEX DOSPUNTOS CORCHETE_A items CORCHETE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int ejex1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ejex1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ejex1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                  System.out.println("EJEX \n");
                  grafica.registEjex(st.left, st.right, ejex1.toString());

             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejex",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ejey ::= EJEY DOSPUNTOS CORCHETE_A nums CORCHETE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int ejey1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ejey1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ejey1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                       grafica.registEjey(st.left, st.right, ejey1.toString());

                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejey",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unir ::= UNIR DOSPUNTOS LLAVE_A corchete LLAVE_C DOSPUNTOS 
            {
              Object RESULT =null;
		int itemsleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itemsright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object items = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                          System.out.println("UNIR  %s \n");
                          RESULT = (ArrayList<short[]>)items;

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unir",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA 
            {
              Object RESULT =null;
		
                     System.out.println("tTIPO\n");
                    grafica.registTipo(st.left, st.right, 0);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA 
            {
              Object RESULT =null;
		
                 System.out.println("tTIPO\n");
                 grafica.registTipo(st.left, st.right, 1);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiqueta ::= ETIQUETAS DOSPUNTOS CORCHETE_A items CORCHETE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int nameleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object name = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                     System.out.println("ETIQUETAS\n");
                     grafica.registEtiqueta(st.left, st.right, name.toString());
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valor ::= VALORES DOSPUNTOS CORCHETE_A nums CORCHETE_C PUNTOCOMA 
            {
              Object RESULT =null;
		int numeroleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numeroright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object numero = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        System.out.println("VALOR\n");
                        grafica.registValores(st.left, st.right, numero.toString());

                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // total ::= TOTAL DOSPUNTOS PUNTOCOMA 
            {
              Object RESULT =null;
		int numleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token num = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                 System.out.println("TOTAL\n");
                 grafica.registTotal(st.left, st.right, Double.valueOf(num.toString()));

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("total",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // extra ::= EXTRA DOSPUNTOS COMILLAS PUNTOCOMA 
            {
              Object RESULT =null;
		int extrasleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extrasright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token extras = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              System.out.println("EXTRA\n");
               grafica.regisExtra(st.left, st.right, extras.toString().substring(1, extras.toString().length() - 1));
              ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("extra",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // items ::= COMILLAS 
            {
              Object RESULT =null;
		int item1left = ((Symbol)CUP$parser$stack.peek()).left;
		int item1right = ((Symbol)CUP$parser$stack.peek()).right;
		Token item1 = (Token)((Symbol) CUP$parser$stack.peek()).value;
		RESULT = item1.toString().substring(1,item1.toString().length() - 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // items ::= items COMA COMILLAS 
            {
              Object RESULT =null;
		int item2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int item2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object item2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int item1left = ((Symbol)CUP$parser$stack.peek()).left;
		int item1right = ((Symbol)CUP$parser$stack.peek()).right;
		Token item1 = (Token)((Symbol) CUP$parser$stack.peek()).value;
		
            String item = item1.toString().substring(1,item1.toString().length() - 1);
            String items = item + "\n" + item2;
            RESULT = items;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("items",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nums ::= c 
            {
              Object RESULT =null;
		int num1left = ((Symbol)CUP$parser$stack.peek()).left;
		int num1right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer num1 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Double.valueOf(num1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nums",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nums ::= c COMA c 
            {
              Object RESULT =null;
		int num2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer num2 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num1left = ((Symbol)CUP$parser$stack.peek()).left;
		int num1right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer num1 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		
            String item = num1.toString();
            String items = item + "\n" + num2;
            RESULT = items;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nums",13, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // corchete ::= corchete COMA llave 
            {
              Object RESULT =null;
		int num1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int num1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object num1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int num2left = ((Symbol)CUP$parser$stack.peek()).left;
		int num2right = ((Symbol)CUP$parser$stack.peek()).right;
		Object num2 = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
             ArrayList<short[]> Actual = (ArrayList<short[]>) num2;
             ArrayList<short[]> Nums = new ArrayList<>();
             Nums.addAll(Actual);
             Nums.addAll((ArrayList<short[]>) num1);
              RESULT = values;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchete",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // corchete ::= llave 
            {
              Object RESULT =null;
		int valleft = ((Symbol)CUP$parser$stack.peek()).left;
		int valright = ((Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
            RESULT =  val;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("corchete",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // llave ::= LLAVE_A c COMA c LLAVE_C 
            {
              Object RESULT =null;
		int valXleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valXright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer valX = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valYleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valYright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer valY = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             short[] tmp = new short[]{Short.valueOf(valX.toString()), Short.valueOf(valY.toString())};
              ArrayList<short[]> array = new ArrayList<>();
              array.add(tmp);
              RESULT = array;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llave",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ejecutar ::= EJECUTAR DOSPUNTOS PARENTESIS_A COMILLAS PARENTESIS_C PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecutar",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // c ::= d 
            {
              Integer RESULT =null;
		int resultadoleft = ((Symbol)CUP$parser$stack.peek()).left;
		int resultadoright = ((Symbol)CUP$parser$stack.peek()).right;
		Integer resultado = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		 RESULT = resultado; /*System.out.printf("Resultado FINAL: %d \n",resultado);*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // c ::= error 
            {
              Integer RESULT =null;
		int errleft = ((Symbol)CUP$parser$stack.peek()).left;
		int errright = ((Symbol)CUP$parser$stack.peek()).right;
		Object err = (Object)((Symbol) CUP$parser$stack.peek()).value;
		
                   errores = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // d ::= d SUMA d 
            {
              Integer RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token op = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Integer(e1.intValue()+e2.intValue());
           operadoresList.add(new OperadorReport("Suma",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // d ::= d RESTA d 
            {
              Integer RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token op = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		
           RESULT = new Integer(e1.intValue()-e2.intValue());
           operadoresList.add(new OperadorReport("Resta",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // d ::= d MULTI d 
            {
              Integer RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token op = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Integer(e1.intValue()*e2.intValue());
           operadoresList.add(new OperadorReport("Multiplicacion",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // d ::= d DIVISION d 
            {
              Integer RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token op = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Integer(e1.intValue()/e2.intValue());
           operadoresList.add(new OperadorReport("Division",op.getLine(),op.getColumn(),e1.toString()+op.getLexeme()+e2.toString()));
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // d ::= ENTERO 
            {
              Integer RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((Symbol)CUP$parser$stack.peek()).right;
		Token e1 = (Token)((Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Integer(Integer.parseInt(e1.getLexeme())); /*System.out.printf("Numero: %d\n",RESULT );*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // d ::= PARENTESIS_A d PARENTESIS_C 
            {
              Integer RESULT =null;
		int e1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e1; /*System.out.printf("Resultado parentesis: %d\n",RESULT );*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // d ::= error c 
            {
              Integer RESULT =null;
		int errleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int errright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object err = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                   errores = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
